#!/usr/bin/env bash
set -euo pipefail

# Unified secrets helper (SOPS + age)
# - pull: merge global (~/.config/smarty/global.env if present) + personal (~/.config/smarty/personal.env if present) + repo (.secrets/<env>.env.enc) â†’ .env.local
# - edit <env>: edit .secrets/<env>.env.enc with sops
# - import <dotenv> [--env dev]: merge keys from plaintext dotenv into .secrets/<env>.env.enc
# - doctor: validate required keys are present in .env.local (or decrypted contents)
#
# Env vars:
#   SECRETS_ENV (default: dev)
#   SOPS_AGE_KEY_FILE (optional; defaults to ~/.config/age/key.txt)

ROOT_DIR="$(cd "$(dirname "$0")/.." && pwd)"
ENV_NAME="${SECRETS_ENV:-dev}"
VAULT_PATH="$ROOT_DIR/.secrets/${ENV_NAME}.env.enc"
GLOBAL_DIR="$HOME/.config/smarty"
GLOBAL_ENV="$GLOBAL_DIR/global.env"
AGE_KEY_DEFAULT="$HOME/.config/age/key.txt"

ensure_age_key() {
  if [[ -z "${SOPS_AGE_KEY_FILE:-}" ]]; then
    export SOPS_AGE_KEY_FILE="$AGE_KEY_DEFAULT"
  fi
  if [[ ! -f "$SOPS_AGE_KEY_FILE" ]]; then
    echo "Error: age private key not found at $SOPS_AGE_KEY_FILE" >&2
    echo "Generate one: mkdir -p ~/.config/age && age-keygen -o ~/.config/age/key.txt" >&2
    exit 1
  fi
}

merge_envs() {
  # args: <global_env_path or -> <repo_plain_path>
  local global_in="$1" repo_in="$2"
  awk -F= '
    BEGIN { OFS = "=" }
    function trim(s){ sub(/^\s+/, "", s); sub(/\s+$/, "", s); return s }
    function is_kv(line){ return (line ~ /^[A-Za-z_][A-Za-z0-9_]*=.*/ ) }
    {
      if (FNR==1) fileidx++
      line=$0
      if (line ~ /^\s*#/ || line ~ /^\s*$/) next
      if (!is_kv(line)) next
      key=$1; sub(/^[^=]*=/, "", line); val=line
      key=trim(key); val=val
      if (fileidx==1) { seen[key]=val } else { seen[key]=val }
    }
    END {
      for (k in seen) print k, seen[k]
    }
  ' "$global_in" "$repo_in"
}

cmd_pull() {
  ensure_age_key
  if [[ ! -f "$VAULT_PATH" ]]; then
    echo "Error: vault not found: $VAULT_PATH" >&2
    exit 1
  fi
  local tmp_repo="$ROOT_DIR/.secrets/.repo.$$.env"
  sops -d --input-type dotenv --output-type dotenv "$VAULT_PATH" > "$tmp_repo"
  local tmp_global="/dev/null"
  local tmp_personal="/dev/null"
  if [[ -f "$GLOBAL_ENV" ]]; then
    tmp_global="$GLOBAL_ENV"
  fi
  if [[ -f "$GLOBAL_DIR/personal.env" ]]; then
    tmp_personal="$GLOBAL_DIR/personal.env"
  fi
  local merged="$ROOT_DIR/.env.local"
  case "$tmp_global:$tmp_personal" in
    /dev/null:/dev/null)
      # Repo only
      grep -v "^#" "$tmp_repo" | sed '/^\s*$/d' > "$merged" ;;
    /dev/null:*)
      merge_envs "$tmp_personal" "$tmp_repo" | sort > "$merged" ;;
    *:/dev/null)
      merge_envs "$tmp_global" "$tmp_repo" | sort > "$merged" ;;
    *)
      # Merge global + personal first, then overlay repo
      local tmp_gp="$ROOT_DIR/.secrets/.gp.$$.env"
      merge_envs "$tmp_global" "$tmp_personal" | sort > "$tmp_gp"
      merge_envs "$tmp_gp" "$tmp_repo" | sort > "$merged"
      rm -f "$tmp_gp" ;;
  esac
  rm -f "$tmp_repo"
  echo "Wrote $merged (env=$ENV_NAME)"
}

cmd_edit() {
  local env_in="${1:-$ENV_NAME}"
  local path="$ROOT_DIR/.secrets/${env_in}.env.enc"
  if [[ ! -f "$path" ]]; then
    echo "Info: creating $path"
    printf "# %s env\n" "$env_in" > "$ROOT_DIR/.secrets/.seed.$$"
    sops --encrypt \
      --input-type dotenv --output-type dotenv \
      --age "$(age-keygen -y "${SOPS_AGE_KEY_FILE:-$AGE_KEY_DEFAULT}")" \
      --filename-override "$path" \
      --encrypted-regex '^(.*)$' \
      --output "$path" "$ROOT_DIR/.secrets/.seed.$$"
    rm -f "$ROOT_DIR/.secrets/.seed.$$"
  fi
  sops "$path"
}

cmd_import() {
  local dotenv_in="${1:-}"
  if [[ -z "$dotenv_in" || ! -f "$dotenv_in" ]]; then
    echo "Usage: $0 import <dotenv_file> [--env dev]" >&2
    exit 2
  fi
  shift || true
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --env) ENV_NAME="$2"; VAULT_PATH="$ROOT_DIR/.secrets/${ENV_NAME}.env.enc"; shift 2 ;;
      *) echo "Unknown arg: $1" >&2; exit 2 ;;
    esac
  done
  ensure_age_key
  mkdir -p "$ROOT_DIR/.secrets"
  local tmp_repo="$ROOT_DIR/.secrets/.repo.$$.env"
  if [[ -f "$VAULT_PATH" ]]; then
    sops --decrypt --input-type dotenv --output-type dotenv "$VAULT_PATH" > "$tmp_repo" || true
  else
    : > "$tmp_repo"
  fi
  # Merge: incoming overrides existing
  awk -F= 'BEGIN{OFS="="}
    function trim(s){ sub(/^\s+/,"",s); sub(/\s+$/, "", s); return s }
    function is_kv(line){ return (line ~ /^[A-Za-z_][A-Za-z0-9_]*=.*/ ) }
    FNR==NR {
      if (!/^\s*#/ && is_kv($0)) { k=$1; sub(/^[^=]*=/, "", $0); src[k]=$0 }
      next
    }
    {
      if (!/^\s*#/ && is_kv($0)) { k=$1; sub(/^[^=]*=/, "", $0); dst[k]=$0 }
    }
    END {
      for (k in dst) { if (!(k in src)) src[k]=dst[k] }
      for (k in src) print k, src[k]
    }
  ' "$dotenv_in" "$tmp_repo" | sort > "$ROOT_DIR/.secrets/.merged.$$.env"
  sops --encrypt \
    --input-type dotenv --output-type dotenv \
    --age "$(age-keygen -y "${SOPS_AGE_KEY_FILE:-$AGE_KEY_DEFAULT}")" \
    --filename-override "$VAULT_PATH" \
    --encrypted-regex '^(.*)$' \
    --output "$VAULT_PATH" "$ROOT_DIR/.secrets/.merged.$$.env"
  rm -f "$tmp_repo" "$ROOT_DIR/.secrets/.merged.$$.env"
  echo "Imported into $VAULT_PATH"
}

cmd_doctor() {
  local file="$ROOT_DIR/.env.local"
  [[ -n "${1:-}" ]] && file="$1"
  if [[ ! -f "$file" ]]; then
    echo "Error: $file not found. Run: scripts/secrets pull" >&2
    exit 1
  fi
  local -a required=(
    SLACK_BOT_TOKEN
    SLACK_SIGNING_SECRET
    OPENAI_API_KEY
    CEREBRAS_API_KEY
    FORECAST_API_KEY
  )
  local missing=()
  for k in "${required[@]}"; do
    if ! rg -n "^${k}=" "$file" >/dev/null 2>&1; then
      missing+=("$k")
    else
      local v
      v=$(grep -E "^${k}=" "$file" | tail -n1 | cut -d'=' -f2-)
      if [[ -z "$v" ]]; then missing+=("$k"); fi
    fi
  done
  if (( ${#missing[@]} > 0 )); then
    echo "Missing/empty keys: ${missing[*]}" >&2
    exit 2
  fi
  echo "Secrets check passed (${#required[@]} keys present)"
}

main() {
  local cmd="${1:-pull}"; shift || true
  case "$cmd" in
    pull) cmd_pull ;;
    edit) cmd_edit "$@" ;;
    import) cmd_import "$@" ;;
    doctor) cmd_doctor "$@" ;;
    *) echo "Usage: $0 {pull|edit [env]|import <dotenv> [--env dev]|doctor [file]}"; exit 1 ;;
  esac
}

main "$@"
